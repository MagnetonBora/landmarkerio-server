#!/usr/bin/env python
# encoding: utf-8
import webbrowser

from landmarkerio.server import (lmio_api, add_lm_endpoints,
                                 add_image_endpoints, add_mesh_endpoints,
                                 add_template_endpoints,
                                 add_collection_endpoints)
from landmarkerio.cache import (build_image_serial_cache,
                                build_mesh_serial_cache)
from landmarkerio.asset import MeshCacheAdapter, ImageCacheAdapter
from landmarkerio.template import FileTemplateAdapter
from landmarkerio.landmark import FileLmAdapter
from landmarkerio.collection import AllCacheCollectionAdapter


def main(mode, asset_dir, recursive=False, ext=None, lm_dir=None,
         template_dir=None, cache_dir=False, dev=False):
    r"""

    """
    api, app = lmio_api(dev=dev)
    lm_adapter = FileLmAdapter(lm_dir)
    add_lm_endpoints(api, lm_adapter)
    if mode == 'image':
        cache_builder = build_image_serial_cache
        asset_adapter = ImageCacheAdapter
        n_dims = 2
        endpoint_adder = add_image_endpoints
    elif mode == 'mesh':
        cache_builder = build_mesh_serial_cache
        asset_adapter = MeshCacheAdapter
        n_dims = 3
        endpoint_adder = add_mesh_endpoints
    else:
        raise ValueError("first argument must be 'image' or 'mesh'")
    cache_dir = cache_builder(asset_dir, recursive=recursive, ext=ext,
                              cache_dir=cache_dir)
    endpoint_adder(api, asset_adapter(cache_dir))
    template_adapter = FileTemplateAdapter(n_dims, template_dir=template_dir)
    add_template_endpoints(api, template_adapter)
    add_collection_endpoints(api, AllCacheCollectionAdapter(cache_dir))
    if not dev:
        webbrowser.open("http://www.landmarker.io/?mode={}".format(mode))
    app.run(debug=True)

from landmarkerio import (TEMPLATE_DINAME, CACHE_DIRNAME, LM_DIRNAME)

if __name__ == "__main__":
    from argparse import ArgumentParser
    parser = ArgumentParser(
        description=r"""
        Serve landmarks and assets for landmarker.io through Menpo.
        """)
    parser.add_argument("mode", help="'image' or 'mesh'")
    parser.add_argument("path", help="path that will be searched for assets")
    parser.add_argument("-r", "--recursive", action='store_true',
                        help="If provided the path is searched recursively for"
                             " assets")
    parser.add_argument("-e", "--ext",
                        help="If provided only files with this extension "
                             "will be imported.")
    parser.add_argument("-l", "--landmarks",
                        help="The directory containing the landmarks. If "
                             "None provided taken"
                             " as './{}'".format(LM_DIRNAME))
    parser.add_argument("-t", "--templates",
                        help="The directory containing the template files. "
                             "If None provided taken as "
                             "'~/{}'".format(TEMPLATE_DINAME))
    parser.add_argument("-c", "--cache",
                        help="The directory used to cache assets for serving."
                             " If None provided taken as './{}'. "
                             "This cache is populated the first time the "
                             "server is run. Subsequent runs verify the cache "
                             "but do not have to rebuild it. Once you have "
                             "finished annotating assets delete this folder "
                             "to reclaim disk space.".format(CACHE_DIRNAME))
    parser.add_argument("--dev", action='store_true',
                        help="Listen to all CORS requests. Useful for "
                             "development on localhost.")
    ns = parser.parse_args()
    main(ns.mode, ns.path, recursive=ns.recursive, ext=ns.ext,
         lm_dir=ns.landmarks, template_dir=ns.templates,
         cache_dir=ns.cache, dev=ns.dev)
